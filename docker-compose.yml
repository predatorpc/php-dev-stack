# ---------------------------------------------------------------
# General config
# predator_pc@2019
# all tech stack
# ---------------------------------------------------------------

version: '3'

services:
# PHP 7.3 FPM
    php:
        build: ./config/php
        container_name: php-fpm
        volumes:
            - ./app:/var/www/app
            - ./config/php/fpm/www.conf:/usr/local/etc/php-fpm.d/www.conf
            - ./sock:/sock
        networks:
            - app-network
# NGINX
    web:
        image: nginx:latest
        container_name: nginx
        ports:
            - ${HTTP_DEV_SERVER_PORT}:80
        volumes:
            - ./app:/var/www/app
            - ./config/nginx/host.conf:/etc/nginx/conf.d/default.conf
            - ./log:/var/log/nginx
            - ./sock:/sock
        networks:
            - app-network

## RabbitMQ
#    rabbitmq:
#        image: rabbitmq:3.6.1-management
#        container_name: rabbitmq
#        environment:
#            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
#            RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
#            RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_DEFAULT_VHOST}
#            RABBITMQ_NODENAME: leadstorage@rabbitmq
#        ports:
#            - ${RABBITMQ_MANAGEMENT_PORT}:15672
#            - ${RABBITMQ_EXCHANGE_PORT}:5672
#        volumes:
#            - ./rabbitmq_data:/var/lib/rabbitmq
#        networks:
#            - app-network
#
## MongoDB
#    mongodb:
#        image: mongo
#        container_name: mongodb
#        restart: unless-stopped
#        volumes:
#            - ./data/db/mongo:/data/db
#        ports:
#            - ${MONGO_DEV_SERVER_PORT}:27017
#        command: --storageEngine wiredTiger
#        networks:
#            - app-network
#
## Additional stuff and databases
## Redis
#    redis:
#        image: redis:4.0-alpine
#        container_name: redisdb
#        restart: unless-stopped
##        command:
##            - 'redis-server'
##            - '--loglevel ${REDIS_LOGLEVEL:-warning}'
##            - '--databases 2'
##            - '--maxmemory ${REDIS_MAXMEM:-50mb}'
##            - '--maxmemory-policy ${REDIS_POLICY:-noeviction}'
##            - '--requirepass ${REDIS_PASS}'
#        volumes:
#            - ./redis:/data
#        ports:
#            - ${REDIS_DEV_PORT}:6379
#        networks:
#            - app-network
#
## Yandex ClickHouse
#    clickhouse:
#        build: ./config/clickhouse/
#        container_name: clickhousedb
#        restart: unless-stopped
#        volumes:
#            - ./clickhouse-data:/var/lib/clickhouse
#        ports:
#            - ${CLICKHOUSE_DEV_PORT}:8123
#            - ${CLICKHOUSE_CLIENT_PORT}:9000
#        networks:
#            - app-network
#
## MySQL
#    mysql:
#        image: mysql:5.6
#        container_name: mysqldb
#        restart: unless-stopped
#        ports:
#            - ${MYSQL_DEV_SERVER_PORT}:3306
#        environment:
#            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
#            MYSQL_DATABASE: ${MYSQL_DATABASE}
#            MYSQL_USER: ${MYSQL_USER}
#            MYSQL_PASSWORD: ${MYSQL_PASSWORD}
#        volumes:
#            - ./mysql:/var/lib/mysql
#        networks:
#            - app-network
#  # PostgreSQL
#    postgres:
#        build: ./config/postgres
#        container_name: postgres
#        restart: unless-stopped
#        ports:
#            - 5432:5432
#        volumes:
#            - ./postgres-data:/var/lib/postgresql/data
#        environment:
#            POSTGRES_ROOT_PASSWORD: ${POSTGRES_ROOT_PASSWORD}
#            POSTGRES_DB: ${POSTGRES_DB}
#            POSTGRES_USER: ${POSTGRES_USER}
#            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#            TIMEZONE: ${TIMEZONE}
#        command: postgres -c shared_buffers=512MB -c effective_cache_size=1536MB -c work_mem=2621kB -c maintenance_work_mem=128MB
#        networks:
#            - app-network
#
## Tools for MySQL
#    phpmyadmin:
#        image: phpmyadmin/phpmyadmin
#        container_name: myadmin
#        restart: unless-stopped
#        environment:
#            PMA_HOST: "mysql"
#        ports:
#            - ${MYADMIN_DEV_SERVER_PORT}:80
#        networks:
#            - app-network
#
## Portainer to organize your docker from UI
#    portainer:
#        restart: unless-stopped
#        container_name: manager
#        image: portainer/portainer
#        ports:
#            - ${PORTAINER_DEV_PORT}:9000
#        volumes:
#            - /var/run/docker.sock:/var/run/docker.sock
#            - /opt/portainer/data:/data
#        networks:
#            - app-network

networks:
    app-network:
        driver: bridge